{
  "name": "grip",
  "version": "1.2.5",
  "author": {
    "name": "Fanout, Inc.",
    "email": "info@fanout.io"
  },
  "description": "GRIP Interface Library",
  "contributors": [
    {
      "name": "Katsuyuki Ohmuro",
      "email": "harmony7@pex2.jp"
    },
    {
      "name": "Konstantin Bokarius",
      "email": "kon@fanout.io"
    }
  ],
  "main": "./lib/grip",
  "repository": {
    "type": "git",
    "url": "https://github.com/fanout/node-grip.git"
  },
  "readmeFilename": "README.md",
  "keywords": [
    "grip",
    "fanout",
    "fanoutpub",
    "realtime",
    "push",
    "pubcontrol",
    "publish"
  ],
  "dependencies": {
    "pubcontrol": "1.x",
    "jwt-simple": "0.x",
    "buffertools": "2.x"
  },
  "license": "MIT",
  "readme": "GRIP Interface Library for NodeJS\n============================================\n\nAuthors: Katsuyuki Ohmuro <harmony7@pex2.jp>, Konstantin Bokarius <kon@fanout.io>\n\nDescription\n-----------\n\nA GRIP interface library for NodeJS.  For use with HTTP reverse proxy servers\nthat support the GRIP interface, such as Pushpin.\n\nRequirements\n------------\n\n    pubcontrol\n\nSample Usage\n------------\n\nExamples for how to publish HTTP response and HTTP stream messages to GRIP proxy endpoints via the GripPubControl class.\n\n```javascript\nvar pubcontrol = require('pubcontrol');\nvar grip = require('grip');\n\nvar callback = function(success, message, context) {\n    if (success) {\n        console.log('Publish successful!');\n    }\n    else {\n        console.log(\"Publish failed!\");\n        console.log(\"Message: \" + message);\n        console.log(\"Context: \");\n        console.dir(context); \n    }\n};\n\n// GripPubControl can be initialized with or without an endpoint configuration.\n// Each endpoint can include optional JWT authentication info.\n// Multiple endpoints can be included in a single configuration.\n\nvar grippub = new grip.GripPubControl({\n        'control_uri': 'https://api.fanout.io/realm/<myrealm>',\n        'control_iss': '<myrealm>',\n        'key': new Buffer('<myrealmkey>', 'base64')});\n\n// Add new endpoints by applying an endpoint configuration:\ngrippub.applyGripConfig([{'control_uri': '<myendpoint_uri_1>'},\n        {'control_uri': '<myendpoint_uri_2>'}]);\n\n// Remove all configured endpoints:\ngrippub.removeAllClients();\n\n// Explicitly add an endpoint as a PubControlClient instance:\nvar pubclient = new pubcontrol.PubControlClient('<myendpoint_uri>');\n// Optionally set JWT auth: pubclient.setAuthJwt(<claim>, '<key>');\n// Optionally set basic auth: pubclient.setAuthBasic('<user>', '<password>');\ngrippub.addClient(pubclient);\n\n// Publish across all configured endpoints:\ngrippub.publishHttpResponse('<channel>', 'Test Publish!', callback);\ngrippub.publishHttpStream('<channel>', 'Test Publish!', callback);\n```\n\nValidate the Grip-Sig request header from incoming GRIP messages. This ensures that the message was sent from a valid source and is not expired. Note that when using Fanout.io the key is the realm key, and when using Pushpin the key is configurable in Pushpin's settings.\n\n```javascript\nvar grip = require('grip');\n\nvar isValid = grip.validateSig(req.headers['grip-sig'], '<key>');\n```\n\nLong polling example via response _headers_. The client connects to a GRIP proxy over HTTP and the proxy forwards the request to the origin. The origin subscribes the client to a channel and instructs it to long poll via the response _headers_. Note that with the recent versions of Apache it's not possible to send a 304 response containing custom headers, in which case the response body should be used instead (next usage example below).\n\n```javascript\nvar http = require('http');\nvar grip = require('grip');\n\nhttp.createServer(function (req, res) {\n    // Validate the Grip-Sig header:\n    if (!grip.validateSig(req.headers['grip-sig'], '<key>')) {\n        return;\n    }\n\n    // Instruct the client to long poll via the response headers:\n    res.writeHead(200, {\n            'Grip-Hold': 'response',\n            // To optionally set a timeout value in seconds:\n            // 'Grip-Timeout': <timeout_value>,\n            'Grip-Channel': grip.createGripChannelHeader('<channel>')});\n    res.end();\n}).listen(80, '0.0.0.0');\n\nconsole.log('Server running...')\n```\n\nLong polling example via response _body_. The client connects to a GRIP proxy over HTTP and the proxy forwards the request to the origin. The origin subscribes the client to a channel and instructs it to long poll via the response _body_.\n\n```javascript\nvar http = require('http');\nvar grip = require('grip');\n\nhttp.createServer(function (req, res) {\n    // Validate the Grip-Sig header:\n    if (!grip.validateSig(req.headers['grip-sig'], '<key>')) {\n        return;\n    }\n\n    // Instruct the client to long poll via the response body:\n    res.writeHead(200, {'Content-Type': 'application/grip-instruct'});\n    res.end(grip.createHoldResponse('<channel>'));\n    // Or to optionally set a timeout value in seconds:\n    // res.end(grip.createHoldResponse('<channel>', null, <timeout_value>));\n}).listen(80, '0.0.0.0');\n\nconsole.log('Server running...')\n```\n\nWebSocket example using nodejs-websocket. A client connects to a GRIP proxy via WebSockets and the proxy forward the request to the origin. The origin accepts the connection over a WebSocket and responds with a control message indicating that the client should be subscribed to a channel. Note that in order for the GRIP proxy to properly interpret the control messages, the origin must provide a 'grip' extension in the 'Sec-WebSocket-Extensions' header. To accomplish this with nodejs-websocket, edit Connection.js and ensure that the following header is appended to the 'this.socket.write()' function call in the answerHandshake() method: 'Sec-WebSocket-Extensions: grip; message-prefix=\"\"\\r\\n'\n\n```javascript\nvar ws = require(\"nodejs-websocket\")\nvar pubcontrol = require('pubcontrol');\nvar grip = require('grip');\n\nws.createServer(function (conn) {\n     // Subscribe the WebSocket to a channel:\n    conn.sendText('c:' + grip.webSocketControlMessage(\n            'subscribe', {'channel': '<channel>'}));\n\n    // Wait and then publish a message to the subscribed channel:\n    setTimeout(function() {\n        var grippub = new grip.GripPubControl({\n                'control_uri': '<myendpoint>'});\n        grippub.publish('test_channel', new pubcontrol.Item(\n                new grip.WebSocketMessageFormat(\n                'Test WebSocket Publish!!')));\n    }, 5000);\n}).listen(80, '0.0.0.0');\n\nconsole.log('Server running...');\n```\n\nWebSocket over HTTP example. In this case, a client connects to a GRIP proxy via WebSockets and the GRIP proxy communicates with the origin via HTTP.\n\n```javascript\nvar http = require('http');\nvar pubcontrol = require('pubcontrol');\nvar grip = require('gripcontrol');\n\nhttp.createServer(function (req, res) {\n    // Validate the Grip-Sig header:\n    if (!grip.validateSig(req.headers['grip-sig'], 'changeme')) {\n        return;\n    }\n\n    // Set the headers required by the GRIP proxy:\n    res.writeHead(200, {\n            'Sec-WebSocket-Extensions': 'grip; message-prefix=\"\"',\n            'Content-Type': 'application/websocket-events'});\n\n    var body = '';\n    req.on('data', function (chunk) {\n        body += chunk;\n    });\n\n    req.on('end', function() {\n        var inEvents = grip.decodeWebSocketEvents(body);\n        if (inEvents[0].getType() == 'OPEN') {\n            // Open the WebSocket and subscribe it to a channel:\n            var outEvents = [];\n            outEvents.push(new grip.WebSocketEvent('OPEN'));\n            outEvents.push(new grip.WebSocketEvent('TEXT', 'c:' +\n                    grip.webSocketControlMessage('subscribe',\n                    {'channel': 'channel'})));\n            res.end(grip.encodeWebSocketEvents(outEvents));\n\n            // Wait and then publish a message to the subscribed channel:\n            setTimeout(function() {\n                var grippub = new grip.GripPubControl({\n                        'control_uri': '<myendpoint>'});\n                grippub.publish('channel', new pubcontrol.Item(\n                        new grip.WebSocketMessageFormat(\n                        'Test WebSocket Publish!!')));\n            }, 5000);\n        }\n    });\n}).listen(80, '0.0.0.0');\n\nconsole.log('Server running...');\n```\n\nParse a GRIP URI to extract the URI, ISS, and key values. The values will be returned in a dictionary containing 'control_uri', 'control_iss', and 'key' keys.\n\n```javascript\nvar grip = require('grip');\nvar config = grip.parseGripUri('http://api.fanout.io/realm/<myrealm>' +\n        '?iss=<myrealm>&key=base64:<myrealmkey>');\n```\n\nLicense\n-------\n\n(C) 2015 Fanout, Inc.  \nLicensed under the MIT License, see file COPYING for details.\n",
  "bugs": {
    "url": "https://github.com/fanout/node-grip/issues"
  },
  "_id": "grip@1.2.5",
  "_from": "grip@latest"
}
