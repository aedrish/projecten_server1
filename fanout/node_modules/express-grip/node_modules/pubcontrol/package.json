{
  "name": "pubcontrol",
  "version": "1.1.0",
  "author": {
    "name": "Fanout, Inc.",
    "email": "info@fanout.io"
  },
  "description": "EPCP Library",
  "contributors": [
    {
      "name": "Katsuyuki Ohmuro",
      "email": "harmony7@pex2.jp"
    },
    {
      "name": "Konstantin Bokarius",
      "email": "kon@fanout.io"
    }
  ],
  "main": "./lib/pubcontrol",
  "repository": {
    "type": "git",
    "url": "https://github.com/fanout/nodepubcontrol.git"
  },
  "readmeFilename": "README.md",
  "keywords": [
    "pubcontrol",
    "fanoutpub",
    "fanout",
    "realtime",
    "push",
    "publish"
  ],
  "dependencies": {
    "agentkeepalive": "2.x",
    "jwt-simple": "0.x"
  },
  "license": "MIT",
  "readme": "PubControl for NodeJS\n======================================\n\nAuthors: Katsuyuki Ohmuro <harmony7@pex2.jp>, Konstantin Bokarius <kon@fanout.io>\n\nDescription\n-----------\n\nEPCP library for NodeJS\n\nHTTP Extensible Pubsub Control Protocol (EPCP) defines a generalized and\nextensible data publishing protocol using HTTP. Data is published by way of\nHTTP POST, whose content is the JSON string representation of an object that\nfollows certain structural guidelines.\n\nEach message consists of one or more data items, and is always sent to a\nspecified channel. The messages are associated with that channel and will\nonly be delivered to those listeners subscribed to the channel.\n\nThis library contains a Format base class and a PubControl class that is used\nto send messages. This library also supports the case when the EPCP endpoint\nrequires certain types of authentication.\n\nRequirements\n------------\n\n    jwt-simple\n\nSample Usage\n------------\n\nThis example illustrates the process of instantiating the PubControl publisher\nclass, defining a data format, and then publishing some data.\n\n```javascript\nvar util = require('util');\nvar pubcontrol = require('pubcontrol');\n\nvar HttpResponseFormat = function(body) { this.body = body; };\nutil.inherits(HttpResponseFormat, pubcontrol.Format);\nHttpResponseFormat.prototype.name = function() { return 'http-response'; };\nHttpResponseFormat.prototype.export = function() { return {'body': this.body}; }\n\nvar callback = function(success, message, context) {\n    if (success) {\n        console.log('Publish successful!');\n    }\n    else {\n        console.log('Publish failed!');\n        console.log('Message: ' + message);\n        console.log('Context: ');\n        console.dir(context); \n    }\n};\n\n// PubControl can be initialized with or without an endpoint configuration.\n// Each endpoint can include optional JWT authentication info.\n// Multiple endpoints can be included in a single configuration.\n\n// Initialize PubControl with a single endpoint:\nvar pub = new pubcontrol.PubControl({\n        'uri': 'https://api.fanout.io/realm/<myrealm>',\n        'iss': '<myrealm>',\n        'key': new Buffer('<myrealmkey', 'base64')});\n\n// Add new endpoints by applying an endpoint configuration:\npub.applyConfig([{'uri': '<myendpoint_uri_1>'},\n        {'uri': '<myendpoint_uri_2>'}]);\n\n// Remove all configured endpoints:\npub.removeAllClients();\n\n// Explicitly add an endpoint as a PubControlClient instance:\nvar pubclient = new pubcontrol.PubControlClient('<myendpoint_uri>');\n// Optionally set JWT auth: pubclient.setAuthJwt(<claim>, '<key>');\n// Optionally set basic auth: pubclient.setAuthBasic('<user>', '<password>');\npub.addClient(pubclient);\n\n// Publish across all configured endpoints:\npub.publish('<channel>', new pubcontrol.Item(\n        new HttpResponseFormat('Test Publish!')), callback);\n```\n\nIn some cases, the EPCP endpoint requires authentication before allowing its\nuse. This library can provide Basic and JWT authentication for these cases. To use Basic authentication instantiate a PubControlClient class, use setBasicAuth() to set the username and password, and add the PubControlClient instance to the PubControl instance via addClient() as shown in the example above. To use JWT authentication pass a configuration to PubControl when instantiating it or via applyConfig and provide the claim as shown in the example above.\n\nIf the claim does not contain an exp value, then this library will create an\nappropriate value for that field on each use. Since the header is generated\nfrom the authorization object each time it needs to be used, the library is\nable to generate a new authorization header, even from the same auth object.\n\nIt is also possible to use a literal JWT string for JWT authentication.\nThis may be useful in certain cases, such as when you are performing a push\nrequest on behalf of another service. That service can preencode the JWT\ntoken and hand it to you in its string representation. This way, that service\ndoes not need to hand the JWT signing key to you.\n\n```javascript\npubclient.setAuthJwt('######.######.######'); // Literal JWT string\n```\n\nLicense\n-------\n\n(C) 2015 Fanout, Inc.  \nLicensed under the MIT License, see file COPYING for details.\n",
  "bugs": {
    "url": "https://github.com/fanout/nodepubcontrol/issues"
  },
  "_id": "pubcontrol@1.1.0",
  "_from": "pubcontrol@1.x"
}
